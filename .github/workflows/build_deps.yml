name: build_macos

on:
  push:
    branches:
      - master
    tags:
      - '20[2-9][0-9]-[0-9][0-9]-[0-9][0-9]'
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - master

env:
  MAC_QT_VERSION: '5.14.1'
  WIN_QT_VERSION: '5.10'

jobs:
  macos64-main:
    name: Build macOS main dependencies (64bit)
    runs-on: [macos-latest]
    env:
      LIBPNG_VERSION: '1.6.37'
      LIBOPUS_VERSION: '1.3.1'
      LIBOGG_VERSION: '68ca3841567247ac1f7850801a164f58738d8df9'
      LIBVORBIS_VERSION: '1.3.6'
      LIBVPX_VERSION: '1.8.2'
      LIBJANSSON_VERSION: '2.12'
      LIBX264_VERSION: 'origin/stable'
      LIBMBEDTLS_VERSION: '2.16.5'
      LIBSRT_VERSION: '1.4.1'
      FFMPEG_VERSION: '4.2.2'
      LIBLUAJIT_VERSION: '2.1.0-beta3'
      LIBFREETYPE_VERSION: '2.10.1'
      SWIG_VERSION: '3.0.12'
      MACOSX_DEPLOYMENT_TARGET: '10.13'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Install Homebrew dependencies
        shell: bash
        run: |
          brew update --preinstall
          brew bundle
      - name: Get Current Date
        shell: bash
        id: get_date
        run: echo ::set-env name=CURRENT_DATE::$(date +"%Y-%m-%d")
      - name: Build environment setup
        shell: bash
        run: |
          mkdir -p CI_BUILD/obsdeps/bin
          mkdir -p CI_BUILD/obsdeps/include
          mkdir -p CI_BUILD/obsdeps/lib
          mkdir -p CI_BUILD/obsdeps/share
          echo ::set-env name=PKG_CONFIG_PATH::$PKG_CONFIG_PATH:/tmp/obsdeps/lib/pkgconfig
          echo ::set-env name=PARALLELISM::$(sysctl -n hw.ncpu)
      - name: 'Restore swig from cache'
        id: swig-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'swig-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/swig-${{ env.SWIG_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.SWIG_VERSION }}
      - name: 'Build dependency swig'
        if: steps.swig-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -O "https://downloads.sourceforge.net/project/swig/swig/swig-${{ env.SWIG_VERSION }}/swig-${{ env.SWIG_VERSION }}.tar.gz"
          tar -xf swig-${{ env.SWIG_VERSION }}.tar.gz
          cd swig-${{ env.SWIG_VERSION }}
          mkdir build
          cd build
          ../configure --disable-dependency-tracking --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency swig'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/swig-${{ env.SWIG_VERSION }}/build
        run: |
          cp swig ${{ github.workspace }}/CI_BUILD/obsdeps/bin/
          mkdir -p ${{ github.workspace }}/CI_BUILD/obsdeps/share/swig/${{ env.SWIG_VERSION }}
          rsync -avh --include="*.i" --include="*.swg" --include="python" --include="lua" --include="typemaps" --exclude="*" ../Lib/* ${{ github.workspace }}/CI_BUILD/obsdeps/share/swig/${{ env.SWIG_VERSION }}
      - name: 'Restore libpng from cache'
        id: libpng-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libpng-cache-rev2'
        with:
          path: ${{ github.workspace }}/CI_BUILD/libpng-${{ env.LIBPNG_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBPNG_VERSION }}
      - name: 'Build dependency libpng'
        if: steps.libpng-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -O "https://downloads.sourceforge.net/project/libpng/libpng16/${{ env.LIBPNG_VERSION }}/libpng-${{ env.LIBPNG_VERSION }}.tar.xz"
          tar -xf libpng-${{ env.LIBPNG_VERSION }}.tar.xz
          cd libpng-${{ env.LIBPNG_VERSION }}
          mkdir build
          cd build
          ../configure --enable-static --disable-shared --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libpng'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/libpng-${{ env.LIBPNG_VERSION }}/build
        run: |
          make install
      - name: 'Restore libopus from cache'
        id: libopus-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libopus-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/opus-${{ env.LIBOPUS_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBOPUS_VERSION }}
      - name: 'Build dependency libopus'
        if: steps.libopus-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -C - -O "https://ftp.osuosl.org/pub/xiph/releases/opus/opus-${{ env.LIBOPUS_VERSION }}.tar.gz"
          tar -xf opus-${{ env.LIBOPUS_VERSION }}.tar.gz
          cd ./opus-${{ env.LIBOPUS_VERSION }}
          mkdir build
          cd ./build
          ../configure --disable-shared --enable-static --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libopus'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/opus-${{ env.LIBOPUS_VERSION }}/build
        run: |
          make install
      - name: 'Restore libogg from cache'
        id: libogg-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libogg-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/ogg-${{ env.LIBOGG_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBOGG_VERSION }}
      - name: 'Build dependency libogg'
        if: steps.libogg-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -O https://gitlab.xiph.org/xiph/ogg/-/archive/${{ env.LIBOGG_VERSION }}/ogg-${{ env.LIBOGG_VERSION }}.tar.gz
          tar -xf ogg-${{ env.LIBOGG_VERSION }}.tar.gz
          cd ./ogg-${{ env.LIBOGG_VERSION }}
          mkdir build
          ./autogen.sh
          cd ./build
          ../configure --disable-shared --enable-static --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libogg'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/ogg-${{ env.LIBOGG_VERSION }}/build
        run: |
          make install
      - name: 'Restore libvorbis from cache'
        id: libvorbis-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libvorbis-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/libvorbis-${{ env.LIBVORBIS_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBVORBIS_VERSION }}
      - name: 'Build dependency libvorbis'
        if: steps.libvorbis-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -C - -O "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-${{ env.LIBVORBIS_VERSION }}.tar.gz"
          tar -xf libvorbis-${{ env.LIBVORBIS_VERSION }}.tar.gz
          cd ./libvorbis-${{ env.LIBVORBIS_VERSION }}
          mkdir build
          cd ./build
          ../configure --disable-shared --enable-static --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libvorbis'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/libvorbis-${{ env.LIBVORBIS_VERSION }}/build
        run: |
          make install
      - name: 'Restore libvpx from cache'
        id: libvpx-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libvpx-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/libvpx-v${{ env.LIBVPX_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBVPX_VERSION }}
      - name: 'Build dependency libvpx'
        if: steps.libvpx-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -O "https://chromium.googlesource.com/webm/libvpx/+archive/v${{ env.LIBVPX_VERSION }}.tar.gz"
          mkdir -p ./libvpx-v${{ env.LIBVPX_VERSION }}
          tar -xf v${{ env.LIBVPX_VERSION }}.tar.gz -C $PWD/libvpx-v${{ env.LIBVPX_VERSION }}
          cd ./libvpx-v${{ env.LIBVPX_VERSION }}
          mkdir -p build
          cd ./build
          ../configure --disable-shared --prefix="/tmp/obsdeps" --libdir="/tmp/obsdeps/lib"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libvpx'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/libvpx-v${{ env.LIBVPX_VERSION }}/build
        run: |
          make install
      - name: 'Restore libjansson from cache'
        id: libjansson-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libjansson-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/jansson-${{ env.LIBJANSSON_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBJANSSON_VERSION }}
      - name: 'Build dependency libjansson'
        if: steps.libjansson-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -C - -O http://www.digip.org/jansson/releases/jansson-${{ env.LIBJANSSON_VERSION }}.tar.gz
          tar -xf jansson-${{ env.LIBJANSSON_VERSION }}.tar.gz
          cd jansson-${{ env.LIBJANSSON_VERSION }}
          mkdir build
          cd ./build
          ../configure --libdir="/tmp/obsdeps/bin" --enable-shared --disable-static
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libjansson'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/jansson-${{ env.LIBJANSSON_VERSION }}/build
        run: |
          find . -name \*.dylib -exec cp -PR \{\} ${{ github.workspace }}/CI_BUILD/obsdeps/bin/ \;
          rsync -avh --include="*/" --include="*.h" --exclude="*" ../src/* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
          rsync -avh --include="*/" --include="*.h" --exclude="*" ./src/* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
          cp ./*.h ${{ github.workspace }}/CI_BUILD/obsdeps/include/
      - name: 'Restore libx264 from cache'
        id: libx264-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libx264-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/x264
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBX264_VERSION }}
      - name: 'Build dependency libx264'
        if: steps.libx264-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          if [ ! -d ./x264 ]; then git clone https://code.videolan.org/videolan/x264.git; fi
          cd ./x264
          git checkout ${{ env.LIBX264_VERSION }}
          mkdir build
          cd ./build
          ../configure --extra-ldflags="-mmacosx-version-min=${{ env.MACOSX_DEPLOYMENT_TARGET }}" --enable-static --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libx264'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/x264/build
        run: |
          make install
      - name: 'Build dependency libx264 (dylib)'
        if: steps.libx264-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/x264/build
        run: |
          ../configure --extra-ldflags="-mmacosx-version-min=${{ env.MACOSX_DEPLOYMENT_TARGET }}" --enable-shared --libdir="/tmp/obsdeps/bin" --prefix="/tmp/obsdeps"
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libx264 (dylib)'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/x264/build
        run: |
          ln -f -s libx264.*.dylib libx264.dylib
          find . -name \*.dylib -exec cp -PR \{\} ${{ github.workspace }}/CI_BUILD/obsdeps/bin/ \;
          rsync -avh --include="*/" --include="*.h" --exclude="*" ../* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
          rsync -avh --include="*/" --include="*.h" --exclude="*" ./* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
      - name: 'Restore libmbedtls from cache'
        id: libmbedtls-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libmbedtls-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/mbedtls-${{ env.LIBMBEDTLS_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBMBEDTLS_VERSION }}
      - name: 'Build dependency libmbedtls'
        if: steps.libmbedtls-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -C - -O https://tls.mbed.org/download/mbedtls-${{ env.LIBMBEDTLS_VERSION }}-gpl.tgz
          tar -xf mbedtls-${{ env.LIBMBEDTLS_VERSION }}-gpl.tgz
          cd mbedtls-${{ env.LIBMBEDTLS_VERSION }}
          sed -i '.orig' 's/\/\/\#define MBEDTLS_THREADING_PTHREAD/\#define MBEDTLS_THREADING_PTHREAD/g' include/mbedtls/config.h
          sed -i '.orig' 's/\/\/\#define MBEDTLS_THREADING_C/\#define MBEDTLS_THREADING_C/g' include/mbedtls/config.h
          mkdir build
          cd ./build
          cmake -DCMAKE_INSTALL_PREFIX="/tmp/obsdeps" -DUSE_SHARED_MBEDTLS_LIBRARY=ON -DENABLE_PROGRAMS=OFF ..
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libmbedtls'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/mbedtls-${{ env.LIBMBEDTLS_VERSION }}/build
        run: |
          make install
          install_name_tool -id /tmp/obsdeps/lib/libmbedtls.${{ env.LIBMBEDTLS_VERSION }}.dylib /tmp/obsdeps/lib/libmbedtls.${{ env.LIBMBEDTLS_VERSION }}.dylib
          install_name_tool -id /tmp/obsdeps/lib/libmbedcrypto.${{ env.LIBMBEDTLS_VERSION }}.dylib /tmp/obsdeps/lib/libmbedcrypto.${{ env.LIBMBEDTLS_VERSION }}.dylib
          install_name_tool -id /tmp/obsdeps/lib/libmbedx509.${{ env.LIBMBEDTLS_VERSION }}.dylib /tmp/obsdeps/lib/libmbedx509.${{ env.LIBMBEDTLS_VERSION }}.dylib
          install_name_tool -change libmbedx509.0.dylib /tmp/obsdeps/lib/libmbedx509.0.dylib /tmp/obsdeps/lib/libmbedtls.${{ env.LIBMBEDTLS_VERSION }}.dylib
          install_name_tool -change libmbedcrypto.3.dylib /tmp/obsdeps/lib/libmbedcrypto.3.dylib /tmp/obsdeps/lib/libmbedtls.${{ env.LIBMBEDTLS_VERSION }}.dylib
          install_name_tool -change libmbedcrypto.3.dylib /tmp/obsdeps/lib/libmbedcrypto.3.dylib /tmp/obsdeps/lib/libmbedx509.${{ env.LIBMBEDTLS_VERSION }}.dylib
          find /tmp/obsdeps/lib -name libmbed\*.dylib -exec cp -PR \{\} ${{ github.workspace }}/CI_BUILD/obsdeps/lib/ \;
          rsync -avh --include="*/" --include="*.h" --exclude="*" ./include/mbedtls/* ${{ github.workspace }}/CI_BUILD/obsdeps/include/mbedtls
          rsync -avh --include="*/" --include="*.h" --exclude="*" ../include/mbedtls/* ${{ github.workspace }}/CI_BUILD/obsdeps/include/mbedtls
          if [ ! -d /tmp/obsdeps/lib/pkgconfig ]; then
              mkdir -p /tmp/obsdeps/lib/pkgconfig
          fi
          cat <<EOF > /tmp/obsdeps/lib/pkgconfig/mbedcrypto.pc
          prefix=/tmp/obsdeps
          libdir=\${prefix}/lib
          includedir=\${prefix}/include

          Name: mbedcrypto
          Description: lightweight crypto and SSL/TLS library.
          Version: ${{ env.LIBMBEDTLS_VERSION }}

          Libs: -L\${libdir} -lmbedcrypto
          Cflags: -I\${includedir}
          EOF
          cat <<EOF > /tmp/obsdeps/lib/pkgconfig/mbedtls.pc
          prefix=/tmp/obsdeps
          libdir=\${prefix}/lib
          includedir=\${prefix}/include

          Name: mbedtls
          Description: lightweight crypto and SSL/TLS library.
          Version: ${{ env.LIBMBEDTLS_VERSION }}

          Libs: -L\${libdir} -lmbedtls
          Cflags: -I\${includedir}
          Requires.private: mbedx509
          EOF
          cat <<EOF > /tmp/obsdeps/lib/pkgconfig/mbedx509.pc
          prefix=/tmp/obsdeps
          libdir=\${prefix}/lib
          includedir=\${prefix}/include

          Name: mbedx509
          Description: The mbedTLS X.509 library
          Version: ${{ env.LIBMBEDTLS_VERSION }}

          Libs: -L\${libdir} -lmbedx509
          Cflags: -I\${includedir}
          Requires.private: mbedcrypto
          EOF
      - name: 'Restore libsrt from cache'
        id: libsrt-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libsrt-cache'
        with:
          path: ${{ github.workspace }}/CI_BUILD/srt-${{ env.LIBSRT_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LIBSRT_VERSION }}-${{ env.LIBMBEDTLS_VERSION }}
      - name: 'Build dependency libsrt'
        if: steps.libsrt-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -O https://github.com/Haivision/srt/archive/v${{ env.LIBSRT_VERSION }}.tar.gz
          tar -xf v${{ env.LIBSRT_VERSION }}.tar.gz
          cd srt-${{ env.LIBSRT_VERSION }}
          mkdir build
          cd ./build
          cmake -DCMAKE_INSTALL_PREFIX="/tmp/obsdeps" -DENABLE_APPS=OFF -DUSE_ENCLIB="mbedtls" -DENABLE_STATIC=ON -DENABLE_SHARED=OFF -DSSL_INCLUDE_DIRS="/tmp/obsdeps/include" -DSSL_LIBRARY_DIRS="/tmp/obsdeps/lib" -DCMAKE_FIND_FRAMEWORK=LAST ..
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libsrt'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/srt-${{ env.LIBSRT_VERSION }}/build
        run: |
          make install
      - name: 'Restore ffmpeg from cache'
        id: ffmpeg-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'ffmpeg-cache'
          CACHE_VARIATION: '${{ env.ffmpeg_VERSION }}-${{ env.LIBOGG_VERSION }}-${{ env.LIBVORBIS_VERSION }}-${{ env.LIBVPX_VERSION }}-${{ env.LIBOPUS_VERSION }}-${{ env.LIBX264_VERSION }}-${{ env.LIBSRT_VERSION }}-${{ env.LIBMBEDTLS_VERSION }}'
        with:
          path: ${{ github.workspace }}/CI_BUILD/FFmpeg-n${{ env.FFMPEG_VERSION }}
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.ffmpeg_VERSION }}-${{ env.CACHE_VARIATION }}
      - name: 'Build dependency ffmpeg'
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          export LDFLAGS="-L/tmp/obsdeps/lib"
          export CFLAGS="-I/tmp/obsdeps/include"
          export LD_LIBRARY_PATH="/tmp/obsdeps/lib"

          # FFMPEG
          curl --retry 5 -L -O https://github.com/FFmpeg/FFmpeg/archive/n${{ env.FFMPEG_VERSION }}.zip
          unzip -q -u ./n${{ env.FFMPEG_VERSION }}.zip
          cd ./FFmpeg-n${{ env.FFMPEG_VERSION }}
          mkdir build
          cd ./build
          ../configure --pkg-config-flags="--static" --extra-ldflags="-mmacosx-version-min=${{ env.MACOSX_DEPLOYMENT_TARGET }}" --enable-shared --disable-static --shlibdir="/tmp/obsdeps/bin" --enable-gpl --disable-doc --enable-libx264 --enable-libopus --enable-libvorbis --enable-libvpx --enable-libsrt --disable-outdev=sdl
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency ffmpeg'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/FFmpeg-n${{ env.FFMPEG_VERSION }}/build
        run: |
          find . -name \*.dylib -exec cp -PR \{\} ${{ github.workspace }}/CI_BUILD/obsdeps/bin/ \;
          rsync -avh --include="*/" --include="*.h" --exclude="*" ../* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
          rsync -avh --include="*/" --include="*.h" --exclude="*" ./* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
      - name: 'Restore libluajit from cache'
        id: libluajit-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libluajit-cache-rev3'
        with:
          path: ${{ github.workspace }}/CI_BUILD/LuaJIT-${{ env.LIBLUAJIT_VERSION }}
          key: ${{ runner.os }}-deps-${{ env.CACHE_NAME }}-${{ env.LIBLUAJIT_VERSION }}
      - name: 'Build dependency libluajit'
        if: steps.libluajit-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          curl --retry 5 -L -C - -O https://LuaJIT.org/download/LuaJIT-${{ env.LIBLUAJIT_VERSION }}.tar.gz
          tar -xf LuaJIT-${{ env.LIBLUAJIT_VERSION }}.tar.gz
          cd LuaJIT-${{ env.LIBLUAJIT_VERSION }}
          make PREFIX="/tmp/obsdeps" -j${{ env.PARALLELISM }}
      - name: 'Install dependency libluajit'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/LuaJIT-${{ env.LIBLUAJIT_VERSION }}
        run: |
          make PREFIX="/tmp/obsdeps" install
          find /tmp/obsdeps/lib -name libluajit\*.dylib -exec cp -PR \{\} ${{ github.workspace }}/CI_BUILD/obsdeps/lib/ \;
          rsync -avh --include="*/" --include="*.h" --exclude="*" src/* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
          make PREFIX="/tmp/obsdeps" uninstall
      - name: 'Restore libfreetype from cache'
        id: libfreetype-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'libfreetype-cache-rev2'
        with:
          path: ${{ github.workspace }}/CI_BUILD/freetype-${{ env.LIBFREETYPE_VERSION }}
          key: ${{ runner.os }}-deps-${{ env.CACHE_NAME }}-${{ env.LIBFREETYPE_VERSION }}
      - name: 'Build dependency libfreetype'
        if: steps.libfreetype-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          export CFLAGS="-mmacosx-version-min=${{ env.MACOSX_DEPLOYMENT_TARGET }}"

          curl --retry 5 -L -C - -O "https://download.savannah.gnu.org/releases/freetype/freetype-${{ env.LIBFREETYPE_VERSION }}.tar.gz"
          tar -xf freetype-${{ env.LIBFREETYPE_VERSION }}.tar.gz
          cd freetype-${{ env.LIBFREETYPE_VERSION }}
          mkdir build
          cd build
          ../configure --enable-shared --disable-static --prefix="/tmp/obsdeps" --enable-freetype-config --without-harfbuzz
          make -j${{ env.PARALLELISM }}
      - name: 'Install dependency libfreetype'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD/freetype-${{ env.LIBFREETYPE_VERSION }}/build
        run: |
          make install
          find /tmp/obsdeps/lib -name libfreetype\*.dylib -exec cp -PR \{\} ${{ github.workspace }}/CI_BUILD/obsdeps/lib/ \;
          rsync -avh --include="*/" --include="*.h" --exclude="*" ../include/* ${{ github.workspace }}/CI_BUILD/obsdeps/include/
          unset CFLAGS
      - name: Package dependencies
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          tar -czf macos-deps-${{ env.CURRENT_DATE }}.tar.gz obsdeps
          if [ ! -d "${{ github.workspace }}/macos" ]; then
            mkdir ${{ github.workspace }}/macos
          fi
          mv ./macos-deps-${{ env.CURRENT_DATE }}.tar.gz ${{ github.workspace }}/macos
      - name: PublishBuildArtifacts
        if: success() && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'macos-deps-${{ env.CURRENT_DATE }}'
          path: ./macos/*.tar.gz

  macos64-qt:
    name: Build macOS Qt dependency (64bit)
    runs-on: [macos-latest]
    env:
      MACOSX_DEPLOYMENT_TARGET: '10.13'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Install Homebrew dependencies
        shell: bash
        run: |
          brew update --preinstall
          brew bundle
      - name: Get Current Date
        shell: bash
        id: get_date
        run: echo ::set-env name=CURRENT_DATE::$(date +"%Y-%m-%d")
      - name: Build environment setup
        shell: bash
        run: |
          mkdir -p CI_BUILD/obsdeps/bin
          mkdir -p CI_BUILD/obsdeps/include
          mkdir -p CI_BUILD/obsdeps/lib
          echo ::set-env name=PKG_CONFIG_PATH::$PKG_CONFIG_PATH:/tmp/obsdeps/lib/pkgconfig
          echo ::set-env name=PARALLELISM::$(sysctl -n hw.ncpu)
      - name: 'Restore qt from cache'
        id: qt-cache
        uses: actions/cache@v2
        env:
          CACHE_NAME: 'qt-build-cache-rev3'
        with:
          path: /tmp/obsdeps
          key: ${{ runner.os }}-deps-${{ env.CACHE_NAME }}-${{ env.MAC_QT_VERSION }}
      - name: 'Build dependency Qt'
        if: steps.qt-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}/CI_BUILD
        run: |
          if [ -d /usr/local/opt/zstd ]; then
            brew unlink zstd
          fi

          if [ -d /usr/local/opt/libtiff ]; then
            brew unlink libtiff
          fi

          if [ -d /usr/local/opt/webp ]; then
            brew unlink webp
          fi

          curl --retry 5 -L -C - -O "https://download.qt.io/official_releases/qt/$(echo "${{ env.MAC_QT_VERSION }}" | cut -d "." -f -2)/${{ env.MAC_QT_VERSION }}/single/qt-everywhere-src-${{ env.MAC_QT_VERSION }}.tar.xz"
          tar -xf qt-everywhere-src-${{ env.MAC_QT_VERSION }}.tar.xz
          if [ "${{ env.MAC_QT_VERSION }}" = "5.14.1" ]; then
              cd qt-everywhere-src-${{ env.MAC_QT_VERSION }}/qtbase
              git apply ${{ github.workspace }}/patch/qt/qtbase.patch
              cd ..
          fi
          mkdir build
          cd build
          if [ ! -n "${CI}" ]; then
            WITH_CCACHE=" -ccache"
          fi
          ../configure ${WITH_CCACHE} --prefix="/tmp/obsdeps" -release -opensource -confirm-license -system-zlib \
            -qt-libpng -qt-libjpeg -qt-freetype -qt-pcre -nomake examples -nomake tests -no-rpath -no-glib -pkg-config -dbus-runtime \
            -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtconnectivity -skip qtdatavis3d \
            -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtlocation \
            -skip qtlottie -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquick3d \
            -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline -skip qtremoteobjects \
            -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtspeech \
            -skip qttranslations -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebglplugin \
            -skip qtwebsockets -skip qtwebview -skip qtwinextras -skip qtx11extras -skip qtxmlpatterns
          make -j${{ env.PARALLELISM }}
          make install
      - name: Package dependencies
        if: success()
        shell: bash
        working-directory: /tmp
        run: |
          tar -czf macos-qt-${{ env.MAC_QT_VERSION }}-${{ env.CURRENT_DATE }}.tar.gz obsdeps
          if [ ! -d "${{ github.workspace }}/macos" ]; then
            mkdir ${{ github.workspace }}/macos
          fi
          mv macos-qt-${{ env.MAC_QT_VERSION }}-${{ env.CURRENT_DATE }}.tar.gz ${{ github.workspace }}/macos
      - name: PublishBuildArtifacts
        if: success() && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'macos-qt-${{ env.MAC_QT_VERSION }}-${{ env.CURRENT_DATE }}'
          path: ./macos/*.tar.gz
  make-release:
    name: 'Create and upload release'
    runs-on: [ubuntu-latest]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [macos64-main, macos64-qt]
    steps:
      - name: Get Current Date
        shell: bash
        id: get_date
        run: echo ::set-env name=CURRENT_DATE::$(date +"%Y-%m-%d")
      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.CURRENT_DATE }}
          release_name: OBS Deps build ${{ env.CURRENT_DATE }}
          draft: false
          prerelease: false
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2-preview
      - name: 'Upload macOS deps to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/macos-deps-${{ env.CURRENT_DATE }}/macos-deps-${{ env.CURRENT_DATE }}.tar.gz
          asset_name: macos-deps-${{ env.CURRENT_DATE }}.tar.gz
          asset_content_type: application/octet-stream
      - name: 'Upload macOS Qt dependency to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/macos-qt-${{ env.MAC_QT_VERSION }}-${{ env.CURRENT_DATE }}/macos-qt-${{ env.MAC_QT_VERSION }}-${{ env.CURRENT_DATE }}.tar.gz
          asset_name: macos-qt-${{ env.MAC_QT_VERSION }}-${{ env.CURRENT_DATE }}.tar.gz
          asset_content_type: application/octet-stream
