name: build_windows

on:
  push:
    branches:
      - master
    tags:
      - 'win-20[2-9][0-9]-[0-9][0-9]-[0-9][0-9]'
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - master

jobs:
  windows-deps-build-cross-compile:
    name: '01 - Build Windows dependencies (cross-compile)'
    runs-on: [ubuntu-20.04]
    strategy:
      matrix:
        arch: ['x86', 'x86_64']
    env:
      CACHE_REVISION: '01'
      MBEDTLS_VERSION: '2.24.0'
      MBEDTLS_HASH: '523f0554b6cdc7ace5d360885c3f5bbcc73ec0e8'
      PTHREAD-WIN32_VERSION: '2.10.0.0'
      PTHREAD-WIN32_HASH: '19fd5054b29af1b4e3b3278bfffbb6274c6c89f5'
      LIBAOM_VERSION: '3.2.0'
      LIBAOM_HASH: '402e264b94fd74bdf66837da216b6251805b4ae4'
      SVT-AV1_VERSION: '0.9.0'
      SVT-AV1_HASH: 'fdf4f36867bba068e221965d12c5975c509845da'
      LIBSRT_VERSION: '1.4.2'
      LIBSRT_HASH: '50b7af06f3a0a456c172b4cb3aceafa8a5cc0036'
      LIBRIST_VERSION: '0.27'
      LIBRIST_HASH: '419f09ea9aa9bf15f9c43b7752ca878521543679'
      LIBX264_VERSION: 'r3060'
      LIBX264_HASH: '5db6aa6cab1b146e07b60cc1736a01f21da01154'
      LIBOPUS_VERSION: '1.3.1'
      LIBOPUS_HASH: 'e85ed7726db5d677c9c0677298ea0cb9c65bdd23'
      ZLIB_VERSION: '1.2.11'
      ZLIB_HASH: 'cacf7f1d4e3d44d871b605da3b647f07d718623f'
      LIBPNG_VERSION: '1.6.37'
      LIBPNG_HASH: '505e70834d35383537b6491e7ae8641f1a4bed1876dbfe361201fc80868d88ca'
      LIBOGG_VERSION: '1.3.4'
      LIBOGG_HASH: '31bd3f2707fb7dbae539a7093ba1fc4b2b37d84e'
      LIBVORBIS_VERSION: '1.3.7'
      LIBVORBIS_HASH: '83a82dd9296400d811b78c06e9ca429e24dd1e5c'
      LIBVPX_VERSION: '1.8.1'
      LIBVPX_HASH: '8ae686757b708cd8df1d10c71586aff5355cfe1e'
      NV-CODEC-HEADERS_VERSION: '11.1.5.1'
      NV-CODEC-HEADERS_HASH: '84483da70d903239d4536763fde8c7e6c4e80784'
      AMF_VERSION: '1.4.16.1'
      AMF_HASH: '802f92ee52b9efa77bf0d3ea8bfaed6040cdd35e'
      FFMPEG_VERSION: '4.4.1'
      FFMPEG_HASH: 'cc33e73618a981de7fd96385ecb34719de031f16'
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          if test -n "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s "${{ github.event.pull_request.url }}" | jq -e '.labels[] | select(.name == "Seeking Testers")')"; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

          echo "CACHE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: 'Restore ccache from cache'
        id: ccache-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'ccache-cache'
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ matrix.arch }}-${{ env.CACHE_DATE }}

      - name: 'Setup build environment'
        run: |
          mkdir -p windows/obs-dependencies-${{ matrix.arch }}/bin
          mkdir -p windows/obs-dependencies-${{ matrix.arch }}/include
          mkdir -p windows/obs-dependencies-${{ matrix.arch }}/lib
          mkdir -p windows/obs-dependencies-${{ matrix.arch }}/share

          ./win-install-tools.sh

          FFMPEG_DEP_HASH="$(echo "${{ env.MBEDTLS_VERSION }}-${{ env.PTHREAD-WIN32_VERSION }}-${{ env.LIBAOM_VERSION }}-${{ env.SVT-AV1_VERSION }}-${{ env.LIBSRT_VERSION }}-${{ env.LIBRIST_VERSION }}-${{ env.LIBX264_VERSION }}-${{ env.LIBOPUS_VERSION }}-${{ env.ZLIB_VERSION }}-${{ env.LIBPNG_VERSION }}-${{ env.LIBOGG_VERSION }}-${{ env.LIBVORBIS_VERSION }}-${{ env.LIBVPX_VERSION }}-${{ env.NV-CODEC-HEADERS_VERSION }}-${{ env.AMF_VERSION }}" | sha256sum | cut -d " " -f 1)"
          echo "FFMPEG_DEP_HASH=$FFMPEG_DEP_HASH" >> $GITHUB_ENV

      - name: 'Restore ffmpeg dependencies from cache'
        id: ffmpeg-deps-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'ffmpeg-deps-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: |
            !${{ github.workspace }}/windows_cross_build_temp/win32
            !${{ github.workspace }}/windows_cross_build_temp/win64
            !${{ github.workspace }}/windows_cross_build_temp/ffmpeg
            ${{ github.workspace }}/windows_cross_build_temp
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.FFMPEG_DEP_HASH }}

      - name: 'Build dependency mbedtls'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_mbedtls.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency mbedtls'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_mbedtls.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency pthread-win32'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_pthread-win32.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency pthread-win32'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_pthread-win32.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libaom'
        if: ${{ steps.ffmpeg-deps-cache.outputs.cache-hit != 'true' && matrix.arch != 'x86' }}
        run: CI/windows/build_libaom.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libaom'
        if: ${{ steps.ffmpeg-deps-cache.outputs.cache-hit == 'true' && matrix.arch != 'x86' }}
        run: CI/windows/build_libaom.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency svt-av1'
        if: ${{ steps.ffmpeg-deps-cache.outputs.cache-hit != 'true' && matrix.arch != 'x86' }}
        run: CI/windows/build_svt-av1.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency svt-av1'
        if: ${{ steps.ffmpeg-deps-cache.outputs.cache-hit == 'true' && matrix.arch != 'x86' }}
        run: CI/windows/build_svt-av1.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libsrt'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libsrt.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libsrt'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libsrt.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency librist'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_librist.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency librist'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_librist.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libx264'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libx264.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libx264'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libx264.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libopus'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libopus.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libopus'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libopus.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency zlib'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_zlib.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency zlib'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_zlib.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libpng'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libpng.sh -a ${{ matrix.arch }}

      - name: 'Install dependency libpng'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libpng.sh -a ${{ matrix.arch }} --install

      - name: 'Build dependency libogg'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libogg.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libogg'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libogg.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libvorbis'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libvorbis.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libvorbis'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libvorbis.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency libvpx'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_libvpx.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency libvpx'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_libvpx.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency nv-codec-headers'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_nv-codec-headers.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency nv-codec-headers'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_nv-codec-headers.sh -s -a ${{ matrix.arch }} --install

      - name: 'Build dependency amf'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_amf.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency amf'
        if: steps.ffmpeg-deps-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_amf.sh -s -a ${{ matrix.arch }} --install

      - name: 'Restore ffmpeg from cache'
        id: ffmpeg-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'ffmpeg-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_cross_build_temp/ffmpeg
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.FFMPEG_VERSION }}-${{ env.FFMPEG_DEP_HASH }}

      - name: 'Build dependency ffmpeg'
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_ffmpeg.sh -s -a ${{ matrix.arch }}

      - name: 'Install dependency ffmpeg'
        if: steps.ffmpeg-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_ffmpeg.sh -s -a ${{ matrix.arch }} --install

      - name: 'Package dependencies'
        if: success()
        working-directory: ${{ github.workspace }}/windows/obs-dependencies-${{ matrix.arch }}
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d")
          FILE_NAME="windows-cross-deps-${CURRENT_DATE}-${{ matrix.arch }}.tar.xz"
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          cp -R ${{ github.workspace }}/licenses .

          XZ_OPT=-T0 tar -cJf "${FILE_NAME}" *

          mv ${FILE_NAME} ..

      - name: 'Publish Build Artifacts'
        if: ${{ success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1') }}
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ github.workspace }}/windows/${{ env.FILE_NAME }}

  windows-deps-build-native:
    name: '01 - Build Windows dependencies (native)'
    runs-on: [windows-2019]
    strategy:
      matrix:
        arch: ['32', '64']
    env:
      CACHE_REVISION: '02'
      MBEDTLS_VERSION: '2.24.0'
      MBEDTLS_HASH: '523f0554b6cdc7ace5d360885c3f5bbcc73ec0e8'
      CMOCKA_VERSION: '1.1.5-git'
      CMOCKA_HASH: '9c114ac31a33217cf003bbb674c1aff7bb048917'
      FREETYPE_VERSION: '2.10.4'
      FREETYPE_HASH: '6a2b3e4007e794bfc6c91030d0ed987f925164a8'
      CURL_VERSION: '7.73.0'
      CURL_HASH: '315ee3fe75dade912b48a21ceec9ccda0230d937'
      RNNOISE_VERSION: '90ec41ef659fd82cfec2103e9bb7fc235e9ea66c'
      RNNOISE_HASH: '90ec41ef659fd82cfec2103e9bb7fc235e9ea66c'
      SPEEXDSP_VERSION: '1.2rc3-git'
      SPEEXDSP_HASH: '20ed3452074664ad07e380e51321b148acebdf20'
      DETOURS_VERSION: 'v4.0.1'
      DETOURS_HASH: 'e4bfd6b03e50de46b47abfbd1e46b384f0c5f833'
      LUAJIT_VERSION: 'v2.0.5'
      LUAJIT_HASH: '0bf80b07b0672ce874feedcc777afe1b791ccb5a'
      PYTHON_VERSION: '3.6.2'
      PYTHON_HASH: ''
      VULKAN_VERSION: '1.2.131.2'
      VULKAN_HASH: '49d515f091d69c005a9e52e69829d28383fe157a764caebaa3dbc4b8d9bb383d'
      NASM_VERSION: '2.15.01'
      NASM_HASH: ''
      SWIG_VERSION: '3.0.12'
      SWIG_HASH: '21ce6cbe297a56b697ef6e7e92a83e75ca41dedc87e48282ab444591986c35f5'
      NTV2_VERSION: '16.1'
      NTV2_HASH: 'abf17cc1e7aadd9f3e4972774a3aba2812c51b75'
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          if test -n "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s "${{ github.event.pull_request.url }}" | jq -e '.labels[] | select(.name == "Seeking Testers")')"; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

          echo "CACHE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: 'Setup build environment'
        shell: bash
        run: |
          mkdir -p windows_native_build_temp/win${{ matrix.arch }}/bin
          mkdir -p windows_native_build_temp/win${{ matrix.arch }}/include
          mkdir -p windows_native_build_temp/win${{ matrix.arch }}/lib

      - name: 'Restore mbedtls from cache'
        id: mbedtls-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'mbedtls-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/mbedtls*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.MBEDTLS_VERSION }}

      - name: 'Build dependency mbedtls'
        if: steps.mbedtls-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_mbedtls.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency mbedtls'
        if: steps.mbedtls-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_mbedtls.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore cmocka from cache'
        id: cmocka-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'cmocka-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/cmocka*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.CMOCKA_VERSION }}

      - name: 'Build dependency cmocka'
        if: steps.cmocka-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_cmocka.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency cmocka'
        if: steps.cmocka-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_cmocka.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore freetype from cache'
        id: freetype-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'freetype-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/freetype*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.FREETYPE_VERSION }}

      - name: 'Build dependency freetype'
        if: steps.freetype-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_freetype.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency freetype'
        if: steps.freetype-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_freetype.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore curl from cache'
        id: curl-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'curl-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/curl*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.CURL_VERSION }}

      - name: 'Build dependency curl'
        if: steps.curl-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_curl.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency curl'
        if: steps.curl-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_curl.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore rnnoise from cache'
        id: rnnoise-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'rnnoise-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/rnnoise*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.RNNOISE_VERSION }}

      - name: 'Build dependency rnnoise'
        if: steps.rnnoise-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_rnnoise.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency rnnoise'
        if: steps.rnnoise-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_rnnoise.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore speexdsp from cache'
        id: speexdsp-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'speexdsp-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/speexdsp*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.SPEEXDSP_VERSION }}

      - name: 'Build dependency speexdsp'
        if: steps.speexdsp-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_speexdsp.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency speexdsp'
        if: steps.speexdsp-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_speexdsp.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore detours from cache'
        id: detours-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'detours-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/detours
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.DETOURS_VERSION }}

      - name: 'Build dependency detours'
        if: steps.detours-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_detours.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency detours'
        if: steps.detours-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_detours.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore luajit from cache'
        id: luajit-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'luajit-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/luajit
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.LUAJIT_VERSION }}

      - name: 'Build dependency luajit'
        if: steps.luajit-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_luajit.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency luajit'
        if: steps.luajit-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_luajit.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore python from cache'
        id: python-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'python-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/python
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.PYTHON_VERSION }}

      - name: 'Build dependency python'
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_python.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency python'
        if: steps.python-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_python.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore vulkan from cache'
        id: vulkan-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'vulkan-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/vulkan*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.VULKAN_VERSION }}

      - name: 'Build dependency vulkan'
        if: steps.vulkan-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_vulkan.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency vulkan'
        if: steps.vulkan-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_vulkan.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore nasm from cache'
        id: nasm-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'nasm-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/nasm*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.NASM_VERSION }}

      - name: 'Build dependency nasm'
        if: steps.nasm-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_nasm.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency nasm'
        if: steps.nasm-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_nasm.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore swig from cache'
        id: swig-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'swig-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/swig*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.SWIG_VERSION }}

      - name: 'Build dependency swig'
        if: steps.swig-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_swig.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency swig'
        if: steps.swig-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_swig.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Restore ntv2 from cache'
        id: ntv2-cache
        uses: actions/cache@v2.1.6
        env:
          CACHE_NAME: 'ntv2-${{ matrix.arch }}-${{ env.CACHE_REVISION }}'
        with:
          path: ${{ github.workspace }}/windows_native_build_temp/ntv2*
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.NTV2_VERSION }}

      - name: 'Build dependency ntv2 Release'
        if: steps.ntv2-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_ntv2.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit

      - name: 'Install dependency ntv2 Release'
        if: steps.ntv2-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_ntv2.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install

      - name: 'Build dependency ntv2 Debug'
        if: steps.ntv2-cache.outputs.cache-hit != 'true'
        run: CI/windows/build_ntv2.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -BuildConfiguration Debug

      - name: 'Install dependency ntv2 Debug'
        if: steps.ntv2-cache.outputs.cache-hit == 'true'
        run: CI/windows/build_ntv2.ps1 -SkipDependencyChecks -BuildArch ${{ matrix.arch }}-bit -Install -BuildConfiguration Debug

      - name: 'Package dependencies'
        if: success()
        working-directory: ${{ github.workspace }}/windows_native_build_temp/win${{ matrix.arch }}
        shell: bash
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d")
          FILE_NAME="windows-native-deps-${CURRENT_DATE}-win${{ matrix.arch }}.tar.gz"
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          cp -R ../../licenses .
          tar -czf "${FILE_NAME}" *
          mv ${FILE_NAME} ..

      - name: 'Publish Build Artifacts'
        if: ${{ success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1') }}
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ github.workspace }}/windows_native_build_temp/${{ env.FILE_NAME }}

  windows-deps-package:
    name: '02 - Generate Windows deps package'
    runs-on: [windows-2019]
    needs: [windows-deps-build-cross-compile, windows-deps-build-native]
    defaults:
      run:
        shell: bash
    steps:
      - name: Get Current Date
        shell: bash
        id: get_date
        run: echo "CURRENT_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          if test -n "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s "${{ github.event.pull_request.url }}" | jq -e '.labels[] | select(.name == "Seeking Testers")')"; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

      - name: 'Checkout'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        uses: actions/checkout@v2.3.4

      - name: 'Download cross x86 artifact'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        uses: actions/download-artifact@v2
        with:
          name: 'windows-cross-deps-${{ env.CURRENT_DATE }}-x86.tar.xz'
          path: ${{ github.workspace }}/windows

      - name: 'Download cross x86_64 artifact'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        uses: actions/download-artifact@v2
        with:
          name: 'windows-cross-deps-${{ env.CURRENT_DATE }}-x86_64.tar.xz'
          path: ${{ github.workspace }}/windows

      - name: 'Download native x86 artifact'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        uses: actions/download-artifact@v2
        with:
          name: 'windows-native-deps-${{ env.CURRENT_DATE }}-win32.tar.gz'
          path: ${{ github.workspace }}/windows

      - name: 'Download native x64 artifact'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        uses: actions/download-artifact@v2
        with:
          name: 'windows-native-deps-${{ env.CURRENT_DATE }}-win64.tar.gz'
          path: ${{ github.workspace }}/windows

      - name: 'Extract artifacts'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        working-directory: ${{ github.workspace }}/windows
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d")
          FILE_NAME="windows-deps-${CURRENT_DATE}"
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV
          ARTIFACT_WIN32_CROSS=$(find . -name "windows-cross-deps-${CURRENT_DATE}-x86.tar.xz" | head -1)
          ARTIFACT_WIN64_CROSS=$(find . -name "windows-cross-deps-${CURRENT_DATE}-x86_64.tar.xz" | head -1)
          ARTIFACT_WIN32_NATIVE=$(find . -name "windows-native-deps-${CURRENT_DATE}-win32.tar.gz" | head -1)
          ARTIFACT_WIN64_NATIVE=$(find . -name "windows-native-deps-${CURRENT_DATE}-win64.tar.gz" | head -1)

          mkdir -p obs-cross-deps/x86
          mkdir -p obs-cross-deps/x86_64
          mkdir -p obs-native-deps/win32
          mkdir -p obs-native-deps/win64

          tar -xf $(basename ${ARTIFACT_WIN32_CROSS}) --directory obs-cross-deps/x86
          tar -xf $(basename ${ARTIFACT_WIN64_CROSS}) --directory obs-cross-deps/x86_64
          tar -xf $(basename ${ARTIFACT_WIN32_NATIVE}) --directory obs-native-deps/win32
          tar -xf $(basename ${ARTIFACT_WIN64_NATIVE}) --directory obs-native-deps/win64

      - name: 'Create Windows deps package'
        shell: pwsh
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        run: CI/package-deps-windows.ps1

      - name: 'Publish Build Artifacts'
        if: ${{ github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1' }}
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ env.FILE_NAME }}
          path: |
            ${{ github.workspace }}\windows\obs-win-deps\win32
            ${{ github.workspace }}\windows\obs-win-deps\win64

  make-release:
    name: 'Create and upload release'
    runs-on: [ubuntu-latest]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [windows-deps-package]
    steps:
      - name: Get Current Date
        shell: bash
        id: get_date
        run: echo "CURRENT_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/win-/}

      - name: 'Create Release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: win-${{ steps.get_version.outputs.VERSION }}
          release_name: OBS Windows Deps build ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: 'Download Windows deps artifact'
        uses: actions/download-artifact@v2
        with:
          name: windows-deps-${{ env.CURRENT_DATE }}

      - name: 'Zip Windows deps artifacts'
        run: |
          pushd win64 > /dev/null
          zip -r ../windows-deps-${{ env.CURRENT_DATE }}-x64.zip *
          popd
          pushd win32 > /dev/null
          zip -r ../windows-deps-${{ env.CURRENT_DATE }}-x86.zip *
          popd
          # Fix libcurl naming for custom OBS finder on obs-studio master
          mv win32/lib/libcurl_imp.lib win32/lib/libcurl.lib
          mv win64/lib/libcurl_imp.lib win64/lib/libcurl.lib
          zip -r windows-deps-${{ env.CURRENT_DATE }}.zip win32 win64

      - name: 'Upload Windows deps package to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/windows-deps-${{ env.CURRENT_DATE }}.zip
          asset_name: windows-deps-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/octet-stream

      - name: 'Upload 64-bit Windows deps package to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/windows-deps-${{ env.CURRENT_DATE }}-x64.zip
          asset_name: windows-deps-${{ steps.get_version.outputs.VERSION }}-x64.zip
          asset_content_type: application/octet-stream

      - name: 'Upload 32-bit Windows deps package to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/windows-deps-${{ env.CURRENT_DATE }}-x86.zip
          asset_name: windows-deps-${{ steps.get_version.outputs.VERSION }}-x86.zip
          asset_content_type: application/octet-stream
