name: Build Windows Dependencies
description: Builds Windows dependencies for obs-deps with specified architecture, type, and build config
inputs:
  target:
    description: Build target for dependencies
    required: true
  type:
    description: Build type (shared or static libraries)
    required: false
    default: static
  config:
    description: Build configuration
    required: false
    default: Release
  workingDirectory:
    description: Working directory for repository action
    required: false
    default: ${{ github.workspace }}
runs:
  using: composite
  steps:
    - name: Environment Setup
      id: env-setup
      shell: pwsh
      run: |
        # Environment Setup

        $Content = Get-Content ${{ inputs.workingDirectory }}/deps.windows/*.ps1

        $Sha256Hasher = [System.Security.Cryptography.HashAlgorithm]::Create('sha256')
        $ContentHash = $Sha256Hasher.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Content))

        "hash=$([System.BitConverter]::ToString($ContentHash).Replace('-','').SubString(0,9).ToLower())" >> $env:GITHUB_OUTPUT

    - name: Restore Windows Dependencies from Cache
      id: deps-cache
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{ inputs.workingDirectory }}/*_build_temp/*
          !${{ inputs.workingDirectory }}/*_build_temp/**/.git
          !${{ inputs.workingDirectory }}/*_build_temp/*.tar.gz
          !${{ inputs.workingDirectory }}/*_build_temp/*.tar.xz
          !${{ inputs.workingDirectory }}/*_build_temp/*.zip
        key: ${{ inputs.target }}-deps-${{ inputs.type }}-${{ inputs.config }}-${{ steps.env-setup.outputs.hash }}

    - name: Install Windows Dependencies
      shell: pwsh
      run: |
        # Install Windows Dependencies

        $Params = @{
          Target = '${{ inputs.target }}'
          Configuration = '${{ inputs.config }}'
          Shared = $(if ( '${{ inputs.type }}' -eq 'shared' ) { $true } else { $false })
          SkipBuild = $(if ( '${{ steps.deps-cache.outputs.cache-hit }}' -eq 'true' ) { $true } else { $false })
          SkipUnpack = $(if ( '${{ steps.deps-cache.outputs.cache-hit }}' -eq 'true' ) { $true } else { $false })
        }

        ./Build-Dependencies.ps1 @Params

    - name: Save Windows Dependencies to Cache
      uses: actions/cache/save@v3
      if: github.event_name == 'schedule' || (github.event_name == 'push' && steps.deps-cache.outputs.cache-hit != 'true')
      with:
        path: |
          ${{ inputs.workingDirectory }}/*_build_temp/*
          !${{ inputs.workingDirectory }}/*_build_temp/**/.git
          !${{ inputs.workingDirectory }}/*_build_temp/*.tar.gz
          !${{ inputs.workingDirectory }}/*_build_temp/*.tar.xz
          !${{ inputs.workingDirectory }}/*_build_temp/*.zip
        key: ${{ inputs.target }}-deps-${{ inputs.type }}-${{ inputs.config }}-${{ steps.env-setup.outputs.hash }}
