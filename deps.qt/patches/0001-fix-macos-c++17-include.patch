--- a/qtbase/src/corelib/tools/qduplicatetracker_p.h   2023-09-24 01:57:15
+++ b/qtbase/src/corelib/tools/qduplicatetracker_p.h   2023-09-24 01:57:32
@@ -16,37 +16,12 @@
 
 #include <private/qglobal_p.h>
 
-#if __has_include(<memory_resource>)
-#  include <unordered_set>
-#  include <memory_resource>
-#  include <qhash.h> // for the hashing helpers
-#else
 #  include <qset.h>
-#endif
 
 QT_BEGIN_NAMESPACE
 
 template <typename T, size_t Prealloc = 32>
 class QDuplicateTracker {
-#ifdef __cpp_lib_memory_resource
-    template <typename HT>
-    struct QHasher {
-        size_t storedSeed = QHashSeed::globalSeed();
-        size_t operator()(const HT &t) const {
-            return QHashPrivate::calculateHash(t, storedSeed);
-        }
-    };
-
-    struct node_guesstimate { void *next; size_t hash; T value; };
-    static constexpr size_t bufferSize(size_t N) {
-        return N * sizeof(void*) // bucket list
-                + N * sizeof(node_guesstimate); // nodes
-    }
-
-    char buffer[bufferSize(Prealloc)];
-    std::pmr::monotonic_buffer_resource res{buffer, sizeof buffer};
-    std::pmr::unordered_set<T, QHasher<T>> set{Prealloc, &res};
-#else
     class Set : public QSet<T> {
         qsizetype setSize = 0;
     public:
@@ -66,23 +41,14 @@
         }
     };
     Set set{Prealloc};
-#endif
     Q_DISABLE_COPY_MOVE(QDuplicateTracker);
 public:
     static constexpr inline bool uses_pmr =
-        #ifdef __cpp_lib_memory_resource
-            true
-        #else
             false
-        #endif
             ;
     QDuplicateTracker() = default;
     explicit QDuplicateTracker(qsizetype n)
-#ifdef __cpp_lib_memory_resource
-        : set{size_t(n), &res}
-#else
         : set{n}
-#endif
     {}
     Q_DECL_DEPRECATED_X("Pass the capacity to reserve() to the ctor instead.")
     void reserve(qsizetype n) { set.reserve(n); }
